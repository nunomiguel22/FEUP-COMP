/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.1 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

public class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Jmm parser;
  public int line;
  public int column;

  public int integerVal = 0;
  public boolean booleanVal;
  public String identifierVal;
  public String typeVal;
  public boolean isStatic = false;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Jmm p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) {
    parent = n;
  }

  public SimpleNode jjtGetParent() {
    return (SimpleNode) parent;
  }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public SimpleNode jjtGetChild(int i) {
    return (SimpleNode) children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) {
    this.value = value;
  }

  public Object jjtGetValue() {
    return value;
  }

  /*
   * You can override these two methods in subclasses of SimpleNode to customize
   * the way the node appears when the tree is dumped. If your output uses more
   * than one line you should override toString(String), otherwise overriding
   * toString() is probably all you need to do.
   */

  public String toString() {
    return JmmTreeConstants.jjtNodeName[id];
  }

  public String toString(String prefix) {
    return prefix + toString();
  }

  /*
   * Override this method if you want to customize how the node dumps out its
   * children.
   */

  public void dump(String prefix) {
    System.out.println(toString(prefix));

    switch (this.id) {
      case JmmTreeConstants.JJTCLASSNAME: {
        System.out.println("\t[ " + this.identifierVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTEXTENDS: {
        System.out.println("\t[ " + this.identifierVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTMEMBERIDENTIFIERTYPE: {
        System.out.println("\t[ " + this.identifierVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTINTEGER: {
        System.out.println("\t[ " + this.integerVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTBOOL: {
        System.out.println("\t[ " + this.booleanVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTVARDECLARATION: {
        System.out.println("\t[ " + this.identifierVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTIDENTIFIER: {
        System.out.println("\t[ " + this.identifierVal + " ]");
        break;
      }
      case JmmTreeConstants.JJTPRIMITIVE: {
        System.out.println("\t[ " + this.typeVal + " ]");
        break;
      }
    }

    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public int getId() {
    return id;
  }

  public boolean isType(int type) {
    return id == type;
  }

  public SimpleNode getFirstChild() {
    return (SimpleNode) children[0];
  }
}

/*
 * JavaCC - OriginalChecksum=f19ce7bc42e0fd89361ae84db618101b (do not edit this
 * line)
 */
